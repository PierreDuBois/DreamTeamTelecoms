package cs.tcd.ie;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.net.InetSocketAddress;

import tcdIO.Terminal;

public class WorkerNode extends Node {
	static final int DST_PORT = 50001;
	static final String DEFAULT_DST_NODE = "worker";
	
	int portNum;
	String[] list;
	String search;
	int entriesProcessed;
	long startTime;
	boolean running;
	Timer heartbeat;
	InetSocketAddress dstAddress;
	/*
	 * @author: Shane Moloney
	 */
	WorkerNode(String dstHost, int dstPort, int srcPort) {
		try {
			dstAddress = new InetSocketAddress(dstHost, dstPort);
			socket = new DatagramSocket(srcPort);
			listener.go();
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Receives WorkerPacket and sets local variables appropriately.
	 */
	public synchronized void onReceipt(DatagramPacket packet) 
	{
		try {
			
			PacketContent content = PacketContent.fromDatagramPacket(packet);
			if(content.getType() == PacketContent.WORKERPACKET)
			{
				list = ((WorkerPacket)content).getData();
				search = ((WorkerPacket)content).toString();
				this.notify();
			}
			else if(content.getType() == PacketContent.STOPWORK)
				running = ((StopWork)content).stopWork();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Sends the registration packet and begins heartbeat timer.
	 */
	public void register()
	{
		DatagramPacket r = new Register(true).toDatagramPacket();
		r.setSocketAddress(dstAddress);
		try {
			socket.send(r);
		} catch (IOException e) {
			e.printStackTrace();
		}
		heartbeat = new Timer();
		heartbeat.schedule(new TimerTask()
		{
		@Override
		public void run()
		{
			DatagramPacket heartbeat = new Heartbeat(true).toDatagramPacket();
			heartbeat.setSocketAddress(dstAddress);
			socket.send(heartbeat);
		}
		}, 1500, 1500);
	}

	public synchronized void start() throws Exception 
	{
		register();
		while(running)
		{
			startTime = System.nanoTime();
			entriesProcessed = 0;
			for(int i = 0; i < list.length; i++)
			{
				if(list[i].equals(search))
				{
					DatagramPacket result = 
							new ResultPacket(i, System.nanoTime()-startTime, list.length).toDatagramPacket();
					result.setSocketAddress(dstAddress);
					socket.send(result);
					break;
				}
				entriesProcessed++;
			}
			register();
			this.wait();
		}
		
		
	}

	/*
	 * 
	 */
	public static void main(String[] args) {
		try {
			WorkerNode first = new WorkerNode(DEFAULT_DST_NODE, DST_PORT,
					2);
			first.start();
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}
}
