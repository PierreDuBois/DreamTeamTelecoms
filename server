
package cs.tcd.ie;

import java.net.DatagramPacket;
import java.net.DatagramSocket;

import tcdIO.Terminal;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
/*
 * @author: Kmla Sharma, Shane Moloney and David Hegarty
 * Student ID: 13319349
 */
public class Server extends Node {
	static final int DEFAULT_PORT = 50001;
	public static final int NODEUPDATEPACKET = 1;
	public static final int ACKPACKET = 10;
	public static final int SEARCHITEMPACKET = 100;
	Terminal terminal;
	String currentSearch;
	String[] FileContent;
	boolean ItemFound;
	/*
	 * 
	 */
	Server(Terminal terminal, int port) 
	{
		try {
			this.terminal= terminal;
			socket= new DatagramSocket(port);
			listener.go();
		}
		catch(java.lang.Exception e) {e.printStackTrace();}
	}

	/**
	 * Assume that incoming packets contain a String and print the string.
	 * Should be able to tell difference between the Client sending a string to search for,
	 * and a worker node sending an update. 
	 */
	public synchronized void onReceipt(DatagramPacket packet) {
		try {
			PacketContent recieved = PacketContent.fromDatagramPacket(packet);
				if(recieved.type == SEARCHITEMPACKET )
				{
			 
				}
				else 
				{
					if(((NodeUpdatePacket)recieved).wasFound() == true)
					{
						ItemFound = true;
						int index = ((NodeUpdatePacket)recieved).getIndex();
						DatagramPacket newpacket = new AckPacketContent(Integer.toString(index)).toDatagramPacket();
						newpacket.setSocketAddress(packet.getSocketAddress());
						socket.send(newpacket);
					}
					else 
					{
						//Implement method to store details of node 
					}
				}
				
		}
		catch(Exception e) {e.printStackTrace();}
	}
	
	
	public synchronized void start() throws Exception 
	{
		organiseFile();
		terminal.println("Waiting for contact");
		this.wait();
		//Create X number of worker nodes, assign each section of FileContent from 1 to x, x to 2X etc.
		//Have them run
	}
	
	public void organiseFile()
	{
		String fname= "names-short.txt";

		String line;
		int counter;
		File file;
		FileInputStream fin;
		BufferedReader in;
		FileOutputStream fout;
		BufferedWriter out;

		try {	
			file= new File(fname);
			System.out.println("File length: " + file.length());
			fin= new FileInputStream(file);
			in= new BufferedReader(new InputStreamReader(fin));
			
			counter= 0;
			FileContent = new String[(int) file.length()];
			while((fin.available()>0)) {
				line= in.readLine();
				FileContent[counter] = line;
				//System.out.println(counter + ": " + line);
				if (((counter++)%100)==0) { wait(1000);}
			}

			in.close();
			fin.close();
		}
		catch(Exception e) {e.printStackTrace();}
	}
	public void timer(int time)
	{
		//Implement a timer class
	}
	
	public static void main(String[] args) 
	{
		try {					
			Terminal terminal= new Terminal("Server");
			(new Server(terminal, DEFAULT_PORT)).start();
			terminal.println("Program completed");
		} catch(java.lang.Exception e) {e.printStackTrace();}
	}
}

